name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm test -- --coverage --passWithNoTests

    - name: SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        scanMetadataReportFile: coverage/lcov.info
      continue-on-error: false

    - name: Run SonarQube Scanner
      run: |
        npx sonar-scanner \
          -Dsonar.projectKey=lifesub-web-dg0401 \
          -Dsonar.sources=src \
          -Dsonar.tests=src \
          -Dsonar.test.inclusions=src/**/*.test.js,src/**/*.test.jsx \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: build/
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read deployment environment variables
      run: |
        # Read deploy_env_vars file and set as environment variables
        while IFS= read -r line; do
          # Skip comments and empty lines
          if [[ ! "$line" =~ ^#.*$ ]] && [[ -n "$line" ]]; then
            # Extract key=value pairs
            if [[ "$line" =~ ^([^=]+)=(.*)$ ]]; then
              key="${BASH_REMATCH[1]}"
              value="${BASH_REMATCH[2]}"
              echo "$key=$value" >> $GITHUB_ENV
            fi
          fi
        done < deployment/deploy_env_vars

    - name: Generate image tag
      id: set-tag
      run: |
        IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Generated image tag: $IMAGE_TAG"

    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.registry }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/

    - name: Build and push Docker image
      run: |
        IMAGE_TAG=${{ steps.set-tag.outputs.image-tag }}
        
        echo "Building lifesub-web image..."
        
        # Build and push image
        docker build \
          --build-arg PROJECT_FOLDER="." \
          --build-arg BUILD_FOLDER="deployment/container" \
          --build-arg EXPORT_PORT="${{ env.export_port }}" \
          --build-arg REACT_APP_MEMBER_URL="http://${{ env.ingress_host }}/api/auth" \
          --build-arg REACT_APP_MYSUB_URL="http://${{ env.ingress_host }}/api/mysub" \
          --build-arg REACT_APP_RECOMMEND_URL="http://${{ env.ingress_host }}/api/recommend" \
          -f deployment/container/Dockerfile-lifesub-web \
          -t ${{ env.registry }}/${{ env.image_org }}/lifesub-web:$IMAGE_TAG .
        
        docker push ${{ env.registry }}/${{ env.image_org }}/lifesub-web:$IMAGE_TAG
        
        echo "Successfully built and pushed lifesub-web:$IMAGE_TAG"

  deploy:
    needs: [build, release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read deployment environment variables
      run: |
        # Read deploy_env_vars file and set as environment variables
        while IFS= read -r line; do
          # Skip comments and empty lines
          if [[ ! "$line" =~ ^#.*$ ]] && [[ -n "$line" ]]; then
            # Extract key=value pairs
            if [[ "$line" =~ ^([^=]+)=(.*)$ ]]; then
              key="${BASH_REMATCH[1]}"
              value="${BASH_REMATCH[2]}"
              echo "$key=$value" >> $GITHUB_ENV
            fi
          fi
        done < deployment/deploy_env_vars

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group rg-digitalgarage-01 --name aks-digitalgarage-01 --overwrite-existing

    - name: Create namespace
      run: |
        kubectl create namespace ${{ env.namespace }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Generate Kubernetes manifests
      run: |
        IMAGE_TAG=${{ needs.release.outputs.image-tag }}
        
        # Set environment variables for manifest generation
        export namespace=${{ env.namespace }}
        export lifesub_web_image_path=${{ env.registry }}/${{ env.image_org }}/lifesub-web:$IMAGE_TAG
        export replicas=${{ env.replicas }}
        export export_port=${{ env.export_port }}
        export ingress_host=${{ env.ingress_host }}
        export resources_requests_cpu=${{ env.resources_requests_cpu }}
        export resources_requests_memory=${{ env.resources_requests_memory }}
        export resources_limits_cpu=${{ env.resources_limits_cpu }}
        export resources_limits_memory=${{ env.resources_limits_memory }}
        
        # Generate manifest from template
        envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
        
        echo "=== Generated Kubernetes Manifest ==="
        cat deployment/deploy.yaml
        echo "=================================="

    - name: Deploy to AKS
      run: |
        kubectl apply -f deployment/deploy.yaml
        
        echo "Waiting for deployment to be ready..."
        kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/lifesub-web --timeout=300s

    - name: Wait for LoadBalancer IP
      run: |
        echo "Waiting for service external IP..."
        timeout=300
        elapsed=0
        
        while [[ -z $(kubectl -n ${{ env.namespace }} get svc lifesub-web-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}') ]]; do
          if [[ $elapsed -ge $timeout ]]; then
            echo "Timeout waiting for External IP assignment"
            exit 1
          fi
          echo "Waiting for External IP assignment... ($elapsed/${timeout}s)"
          sleep 10
          elapsed=$((elapsed + 10))
        done

    - name: Display deployment results
      run: |
        EXTERNAL_IP=$(kubectl -n ${{ env.namespace }} get svc lifesub-web-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        echo "=========================================="
        echo "ðŸŽ‰ Frontend Deployment Completed Successfully!"
        echo "Service External IP: $EXTERNAL_IP"
        echo "Application URL: http://$EXTERNAL_IP"
        echo "Image Tag: ${{ needs.release.outputs.image-tag }}"
        echo "Ingress Host: ${{ env.ingress_host }}"
        echo "=========================================="

    - name: Verify deployment
      run: |
        echo "Checking deployment status..."
        kubectl -n ${{ env.namespace }} get deployments
        kubectl -n ${{ env.namespace }} get services
        kubectl -n ${{ env.namespace }} get configmaps
        
        echo "Checking pod status..."
        kubectl -n ${{ env.namespace }} get pods -l app=lifesub-web
        
        echo "Checking service endpoints..."
        kubectl -n ${{ env.namespace }} get endpoints lifesub-web-service
